// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: hello

#include "hello_generated.h"
#include "hello.grpc.fb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace hello {

static const char* Greeter_method_names[] = {
  "/hello.Greeter/Hello",
  "/hello.Greeter/HelloHello",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_Hello_(Greeter_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HelloHello_(Greeter_method_names[1], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}
  
::grpc::Status Greeter::Stub::Hello(::grpc::ClientContext* context, const flatbuffers::BufferRef<Message>& request, flatbuffers::BufferRef<Message>* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Hello_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Message>>* Greeter::Stub::AsyncHelloRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Message>& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< flatbuffers::BufferRef<Message>>(channel_.get(), cq, rpcmethod_Hello_, context, request);
}

::grpc::ClientReader< flatbuffers::BufferRef<Message>>* Greeter::Stub::HelloHelloRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Message>& request) {
  return new ::grpc::ClientReader< flatbuffers::BufferRef<Message>>(channel_.get(), rpcmethod_HelloHello_, context, request);
}

::grpc::ClientAsyncReader< flatbuffers::BufferRef<Message>>* Greeter::Stub::AsyncHelloHelloRaw(::grpc::ClientContext* context, const flatbuffers::BufferRef<Message>& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< flatbuffers::BufferRef<Message>>(channel_.get(), cq, rpcmethod_HelloHello_, context, request, tag);
}

Greeter::Service::Service() {
  (void)Greeter_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, flatbuffers::BufferRef<Message>, flatbuffers::BufferRef<Message>>(
          std::mem_fn(&Greeter::Service::Hello), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[1],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Greeter::Service, flatbuffers::BufferRef<Message>, flatbuffers::BufferRef<Message>>(
          std::mem_fn(&Greeter::Service::HelloHello), this)));
}

Greeter::Service::~Service() {
}

::grpc::Status Greeter::Service::Hello(::grpc::ServerContext* context, const flatbuffers::BufferRef<Message>* request, flatbuffers::BufferRef<Message>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::HelloHello(::grpc::ServerContext* context, const flatbuffers::BufferRef<Message>* request, ::grpc::ServerWriter< flatbuffers::BufferRef<Message>>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hello

